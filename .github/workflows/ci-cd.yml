name: Sulasang CI/CD with Gradle, Github Actions, Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 체크아웃
        uses: actions/checkout@v3

      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: QEMU 설치
        uses: docker/setup-qemu-action@v2

      - name: 도커 설치
        uses: docker/setup-buildx-action@v2

      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: adopt

      - name: 빌드 권한 부여
        run: chmod +x ./gradlew
        shell: bash

      - name: 프로젝트 빌드
        run: ./gradlew clean build
        shell: bash

      - name: 이미지 빌드 & DockerHub Push
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/sulasang .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/sulasang ${{ secrets.DOCKERHUB_USERNAME }}/sulasang:${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/sulasang:${GITHUB_SHA::7}

      - name: EC2 인스턴스 접속 및 애플리케이션 실행
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}

          script: |
            sudo su
            echo "EC2 접속 완료"
            
            #!/bin/bash
            API_PORT=8080
            CRAWLER_PORT=8081
            DOCKER_PORT=8083
            API_PID=$(lsof -t -i :$API_PORT)
            CRAWLER_PID=$(lsof -t -i :$CRAWLER_PORT)
            DOCKER_PID=$(lsof -t -i :$DOCKER_PORT)
            
            if [ -z "$API_PID" ]; then
              echo "포트 $API_PORT를 사용하는 프로세스가 실행 중이지 않습니다."
            else
              echo "포트 $API_PORT를 사용하는 프로세스 (PID: $API_PID)를 종료합니다."
              kill $API_PID
            fi
            
            if [ -z "$CRAWLER_PID" ]; then
              echo "포트 $CRAWLER_PORT를 사용하는 프로세스가 실행 중이지 않습니다."
            else
              echo "포트 $CRAWLER_PORT를 사용하는 프로세스 (PID: $CRAWLER_PID)를 종료합니다."
              kill $CRAWLER_PID
            fi
            
            if [ -z "$DOCKER_PID" ]; then
              echo "포트 $DOCKER_PORT를 사용하는 프로세스가 실행 중이지 않습니다."
            else
              echo "포트 $DOCKER_PORT를 사용하는 프로세스 (PID: $DOCKER_PID)를 종료합니다."
              kill $DOCKER_PID
            fi
            
            exit
            
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin ${{ secrets.DOCKERHUB_PASSWORD }}
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/sulasang
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/sulasang

            sudo docker run -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
            --name ${{ secrets.PROJECT_NAME }} \
            -e SPRING_DATASOURCE_URL=${{ secrets.DB_URL }} \
            -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -d ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}